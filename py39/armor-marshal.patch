diff --git a/Include/cpython/code.h b/Include/cpython/code.h
index cda28ac..48c3ac1 100644
--- a/Include/cpython/code.h
+++ b/Include/cpython/code.h
@@ -40,6 +40,7 @@ struct PyCodeObject {
     PyObject *co_name;          /* unicode (name, for reference) */
     PyObject *co_lnotab;        /* string (encoding addr<->lineno mapping) See
                                    Objects/lnotab_notes.txt for details. */
+    PyObject *co_pyarmor_data;
     void *co_zombieframe;       /* for optimization only (see frameobject.c) */
     PyObject *co_weakreflist;   /* to support weakrefs to code objects */
     /* Scratch space for extra data relating to the code object.
diff --git a/Objects/codeobject.c b/Objects/codeobject.c
index cb4fb68..907cbec 100644
--- a/Objects/codeobject.c
+++ b/Objects/codeobject.c
@@ -119,7 +119,7 @@ PyCode_NewWithPosOnlyArgs(int argcount, int posonlyargcount, int kwonlyargcount,
                           PyObject *code, PyObject *consts, PyObject *names,
                           PyObject *varnames, PyObject *freevars, PyObject *cellvars,
                           PyObject *filename, PyObject *name, int firstlineno,
-                          PyObject *lnotab)
+                          PyObject *lnotab,PyObject *pyarmor_data)
 {
     PyCodeObject *co;
     Py_ssize_t *cell2arg = NULL;
@@ -268,6 +268,8 @@ PyCode_NewWithPosOnlyArgs(int argcount, int posonlyargcount, int kwonlyargcount,
     co->co_opcache = NULL;
     co->co_opcache_flag = 0;
     co->co_opcache_size = 0;
+    Py_XINCREF(pyarmor_data);
+    co->co_pyarmor_data = pyarmor_data;
     return co;
 }

@@ -282,7 +284,7 @@ PyCode_New(int argcount, int kwonlyargcount,
     return PyCode_NewWithPosOnlyArgs(argcount, 0, kwonlyargcount, nlocals,
                                      stacksize, flags, code, consts, names,
                                      varnames, freevars, cellvars, filename,
-                                     name, firstlineno, lnotab);
+                                     name, firstlineno, lnotab,NULL);
 }

 int
@@ -390,6 +392,7 @@ static PyMemberDef code_memberlist[] = {
     {"co_code",         T_OBJECT,       OFF(co_code),            READONLY},
     {"co_consts",       T_OBJECT,       OFF(co_consts),          READONLY},
     {"co_names",        T_OBJECT,       OFF(co_names),           READONLY},
+    {"co_pyarmor_data",    T_OBJECT, OFF(co_pyarmor_data),    READONLY},
     {"co_varnames",     T_OBJECT,       OFF(co_varnames),        READONLY},
     {"co_freevars",     T_OBJECT,       OFF(co_freevars),        READONLY},
     {"co_cellvars",     T_OBJECT,       OFF(co_cellvars),        READONLY},
diff --git a/Python/marshal.c b/Python/marshal.c
index 651168d..958e22b 100644
--- a/Python/marshal.c
+++ b/Python/marshal.c
@@ -1314,6 +1314,7 @@ r_object(RFILE *p)
             PyObject *code = NULL;
             PyObject *consts = NULL;
             PyObject *names = NULL;
+            PyObject *pyarmor_data = NULL;
             PyObject *varnames = NULL;
             PyObject *freevars = NULL;
             PyObject *cellvars = NULL;
@@ -1378,19 +1379,27 @@ r_object(RFILE *p)
             lnotab = r_object(p);
             if (lnotab == NULL)
                 goto code_error;
-
+            if ((flags & 0x20000000) != 0) {
+                int armor_len = r_byte(p);
+                if (armor_len) {
+                    const char *extradata = r_string(armor_len, p);
+                    printf("Got pyarmor-specific data of length %d\n", armor_len);
+                    pyarmor_data = PyBytes_FromStringAndSize(extradata, armor_len);
+                }
+            }
             v = (PyObject *) PyCode_NewWithPosOnlyArgs(
                             argcount, posonlyargcount, kwonlyargcount,
                             nlocals, stacksize, flags,
                             code, consts, names, varnames,
                             freevars, cellvars, filename, name,
-                            firstlineno, lnotab);
+                            firstlineno, lnotab,pyarmor_data);
             v = r_ref_insert(v, idx, flag, p);

           code_error:
             Py_XDECREF(code);
             Py_XDECREF(consts);
             Py_XDECREF(names);
+            Py_XDECREF(pyarmor_data);
             Py_XDECREF(varnames);
             Py_XDECREF(freevars);
             Py_XDECREF(cellvars);



diff --git a/Objects/codeobject.c b/Objects/codeobject.c
index 907cbec..7c5c166 100644
--- a/Objects/codeobject.c
+++ b/Objects/codeobject.c
@@ -371,7 +371,8 @@ PyCode_NewEmpty(const char *filename, const char *funcname, int firstlineno)
                 filename_ob,                    /* filename */
                 funcname_ob,                    /* name */
                 firstlineno,                    /* firstlineno */
-                emptystring                     /* lnotab */
+                emptystring,                     /* lnotab */
+                NULL
                 );

 failed:
@@ -544,7 +545,7 @@ code_new(PyTypeObject *type, PyObject *args, PyObject *kw)
                                                code, consts, ournames,
                                                ourvarnames, ourfreevars,
                                                ourcellvars, filename,
-                                               name, firstlineno, lnotab);
+                                               name, firstlineno, lnotab,NULL);
   cleanup:
     Py_XDECREF(ournames);
     Py_XDECREF(ourvarnames);
@@ -684,7 +685,7 @@ code_replace_impl(PyCodeObject *self, int co_argcount,
         co_argcount, co_posonlyargcount, co_kwonlyargcount, co_nlocals,
         co_stacksize, co_flags, (PyObject*)co_code, co_consts, co_names,
         co_varnames, co_freevars, co_cellvars, co_filename, co_name,
-        co_firstlineno, (PyObject*)co_lnotab);
+        co_firstlineno, (PyObject*)co_lnotab,NULL);
 }

 static PyObject *


diff --git a/Include/cpython/code.h b/Include/cpython/code.h
index 48c3ac1..ae029f9 100644
--- a/Include/cpython/code.h
+++ b/Include/cpython/code.h
@@ -123,7 +123,7 @@ PyAPI_FUNC(PyCodeObject *) PyCode_New(
 PyAPI_FUNC(PyCodeObject *) PyCode_NewWithPosOnlyArgs(
         int, int, int, int, int, int, PyObject *, PyObject *,
         PyObject *, PyObject *, PyObject *, PyObject *,
-        PyObject *, PyObject *, int, PyObject *);
+        PyObject *, PyObject *, int, PyObject *,PyObject *);
         /* same as struct above */


diff --git a/Python/compile.c b/Python/compile.c
index 28003b6..a9f0bc6 100644
--- a/Python/compile.c
+++ b/Python/compile.c
@@ -5967,7 +5967,7 @@ makecode(struct compiler *c, struct assembler *a)
                                    posonlyargcount, kwonlyargcount, nlocals_int,
                                    maxdepth, flags, bytecode, consts, names,
                                    varnames, freevars, cellvars, c->c_filename,
-                                   c->u->u_name, c->u->u_firstlineno, a->a_lnotab);
+                                   c->u->u_name, c->u->u_firstlineno, a->a_lnotab,NULL);
  error:
     Py_XDECREF(consts);
     Py_XDECREF(names);



